name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CI: true
  UV_COMPILE_BYTECODE: 1
  UV_CACHE_DIR: ~/.cache/uv
  UV_INDEX_STRATEGY: unsafe-best-match

jobs:
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract tool versions
        id: versions
        run: |
          echo "python-version=$(./scripts/extract-versions.sh python)" >> $GITHUB_OUTPUT
          echo "node-version=$(./scripts/extract-versions.sh node)" >> $GITHUB_OUTPUT
          echo "pnpm-version=$(./scripts/extract-versions.sh pnpm)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ steps.versions.outputs.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: latest

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}-
            ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}-
            ${{ runner.os }}-uv-

      - name: Show UV version info
        run: |
          echo "UV Version: $(uv --version)"
          echo "Python Version: $(uv run python --version)"
          echo "UV Cache Directory: $UV_CACHE_DIR"

      - name: Install dependencies
        run: uv sync --dev

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.versions.outputs.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ steps.versions.outputs.pnpm-version }}

      - name: Install additional tools
        run: |
         sudo apt-get update
          # Install shellcheck
          sudo apt-get install -y shellcheck
          # Install hadolint (pin version)
          HADOLINT_VERSION=v2.14.0
          curl -fsSL https://github.com/hadolint/hadolint/releases/download/${HADOLINT_VERSION}/hadolint-Linux-x86_64 -o hadolint
          curl -fsSL https://github.com/hadolint/hadolint/releases/download/${HADOLINT_VERSION}/hadolint-Linux-x86_64.sha256 -o hadolint.sha256
          sha256sum -c hadolint.sha256
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/
          # Install trivy (pin version)
          TRIVY_VERSION=v0.67.0
          curl -fsSL https://github.com/aquasecurity/trivy/releases/download/${TRIVY_VERSION}/trivy_${TRIVY_VERSION#v}_Linux-64bit.tar.gz -o trivy.tgz
          curl -fsSL https://github.com/aquasecurity/trivy/releases/download/${TRIVY_VERSION}/trivy_${TRIVY_VERSION#v}_Linux-64bit.tar.gz.sha256 -o trivy.tgz.sha256
          sha256sum -c trivy.tgz.sha256
          sudo tar -xzf trivy.tgz -C /usr/local/bin trivy

      - name: Run quality checks
        run: ./scripts/quality-check.sh

  docker-test:
    name: Docker Image Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test and build Docker images
        run: |
          echo "üß™ Testing and building Docker images..."
          ./scripts/docker-manager.sh build --all --test

      - name: Install hadolint
        run: |
          echo "üì¶ Installing hadolint for Dockerfile validation..."
          curl -L https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64 -o hadolint
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/
          echo "‚úÖ hadolint installed: $(hadolint --version)"

      - name: Validate Dockerfiles
        run: |
          echo "üìù Validating Dockerfiles..."
          ./scripts/docker-manager.sh validate
          echo "‚úÖ Dockerfile validation completed"


  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [quality, docker-test]
    permissions:
      contents: read
      security-events: write
      actions: read
    # Only run security scan if Docker files or dependencies change
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/main' ||
      contains(github.event.head_commit.modified, 'docker/') ||
      contains(github.event.head_commit.modified, 'pyproject.toml') ||
      contains(github.event.head_commit.modified, 'uv.lock') ||
      contains(github.event.head_commit.added, 'docker/') ||
      contains(github.event.head_commit.added, 'pyproject.toml') ||
      contains(github.event.head_commit.added, 'uv.lock')
    strategy:
      matrix:
        image: [alpine, standard]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host

      - name: Build ${{ matrix.image }} image for scanning
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.image }}
          platforms: ${{ matrix.image == 'standard' && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          push: false
          tags: ats-pdf-generator:${{ matrix.image }}-scan
          cache-from: |
            type=gha,scope=${{ matrix.image }}-base
            type=gha,scope=${{ matrix.image }}-deps
            type=gha,scope=${{ matrix.image }}-app
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.image }}-base
            type=gha,mode=max,scope=${{ matrix.image }}-deps
            type=gha,mode=max,scope=${{ matrix.image }}-app
          build-args: |
            GIT_SHA=${{ github.sha }}
            VENDOR=DohDa Labs
            UV_CACHE_DIR=/tmp/uv-cache
            BUILDKIT_INLINE_CACHE=1
            BUILDKIT_MULTI_PLATFORM=${{ matrix.image == 'standard' && '1' || '0' }}

      - name: Cache Trivy vulnerability database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            trivy-db-${{ runner.os }}-
            trivy-db-

      - name: Run Trivy vulnerability scanner (${{ matrix.image }})
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ats-pdf-generator:${{ matrix.image }}-scan'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}.sarif'
          cache-dir: ~/.cache/trivy
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        continue-on-error: true

      - name: Check if SARIF file was created
        run: |
          if [ -f "trivy-results-${{ matrix.image }}.sarif" ]; then
            echo "‚úÖ SARIF file created: trivy-results-${{ matrix.image }}.sarif"
            ls -la trivy-results-${{ matrix.image }}.sarif
          else
            echo "‚ùå SARIF file not found: trivy-results-${{ matrix.image }}.sarif"
            echo "Available files:"
            ls -la *.sarif || echo "No SARIF files found"
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main' && hashFiles('trivy-results-${{ matrix.image }}.sarif') != ''
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'
        continue-on-error: true


  security-scan-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: always()
    steps:
      - name: Check SARIF files exist
        run: |
          echo "Checking for SARIF files..."
          ls -la *.sarif || echo "No SARIF files found"
          if [ -f "trivy-results-alpine.sarif" ]; then
            echo "‚úÖ trivy-results-alpine.sarif exists"
          else
            echo "‚ùå trivy-results-alpine.sarif not found"
          fi
          if [ -f "trivy-results-standard.sarif" ]; then
            echo "‚úÖ trivy-results-standard.sarif exists"
          else
            echo "‚ùå trivy-results-standard.sarif not found"
          fi

  publish:
    name: Publish (on main)
    runs-on: ubuntu-latest
    needs: [quality, docker-test, security-scan-summary]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Docker images using docker-manager.sh
        run: |
          echo "üöÄ Publishing Docker images using docker-manager.sh..."
          ./scripts/docker-manager.sh publish ${{ github.sha }}
          echo "‚úÖ Docker images published successfully"
