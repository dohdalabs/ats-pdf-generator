[env]
PYTHONUNBUFFERED = "1"
LC_ALL = "C.UTF-8"
LANG = "C.UTF-8"

[tools]
python = "3.13.7"
uv = "latest"
shellcheck = "latest"
hadolint = "2.12.1-beta"
node = "22.17.0"
pnpm = "latest"
[tasks]
# 🚀 Environment Setup
install = "uv sync && uv run pre-commit install && uv run pre-commit install --hook-type commit-msg"
install-prod = "uv sync --frozen --no-dev"
setup-local = "scripts/setup-local-env.sh"

# 🔧 Most Common Quick Actions
check = "mise run lint-python && mise run lint-shell && mise run lint-docker && mise run lint-markdown"  # Check all code
fix = "mise run format-python && mise run format-markdown"  # Auto-fix formatting issues
test = "uv run pytest"

# 📝 Individual Linting
lint-python = "uv run ruff check ."
lint-shell = "shellcheck install.sh src/*.sh || true"
lint-docker = "hadolint --ignore DL3008,DL3009,DL3018,DL3045,DL4006 docker/Dockerfile.optimized docker/Dockerfile.alpine docker/Dockerfile.dev || true"
lint-markdown = "./scripts/quality/check-markdown.sh"
lint = "mise run lint-python"  # Shortcut for most common linting

# 🎨 Individual Formatting
format-python = "uv run ruff format ."
format-markdown = "./scripts/quality/check-markdown.sh --fix"
format = "mise run format-python"  # Shortcut for most common formatting

# 🔍 Additional Checks
check-python = "mise run lint-python && mise run typecheck"
typecheck = "uv run mypy src/ats_pdf_generator/"

# ✅ Comprehensive Quality Checks
check-all = "scripts/quality-check.sh"  # Everything: linting, testing, security
quality-check = "scripts/quality-check.sh"  # Alias for backward compatibility

# 📄 PDF Operations
convert = "scripts/convert-pdf.sh"

# 🐳 Docker Operations
build-image = "scripts/build-dev-image.sh"  # Build dev image (rarely needed)
build-test = "scripts/build-and-test.sh"
docker-shell = "docker run --rm -it -v \"$(pwd):/app\" -w /app ats-pdf-generator:dev bash"

# 🚀 Development Environment (Efficient Workflow)
dev-up = "docker-compose -f docker/docker-compose.yml --profile dev up -d ats-converter-dev"
dev-down = "docker-compose -f docker/docker-compose.yml --profile dev down"
dev-logs = "docker-compose -f docker/docker-compose.yml --profile dev logs -f ats-converter-dev"
dev-shell = "docker-compose -f docker/docker-compose.yml --profile dev exec ats-converter-dev bash"
dev-restart = "mise run dev-down && mise run dev-up"

# 🧪 Testing with Docker
dev-run = "docker-compose -f docker/docker-compose.yml run --rm ats-converter-dev python -m src.ats_pdf_generator.ats_converter"
dev-convert = "docker-compose -f docker/docker-compose.yml run --rm ats-converter-dev python -m src.ats_pdf_generator.ats_converter examples/sample-profile.md -o /tmp/test.pdf"

# 🧹 Cleanup
docker-clean = "docker rmi ats-pdf-generator:dev 2>/dev/null || true"
docker-clean-all = "docker system prune -f && docker image prune -f"

# 🚀 Publishing & Deployment
setup-auth = "scripts/setup-docker-auth.sh"
publish = "scripts/publish.sh"
publish-image = "scripts/publish-image.sh"

# 🔧 Development Tools
pre-commit = "uv run pre-commit run --all-files"

# 📦 UV Package Management
uv-sync = "uv sync"
uv-sync-frozen = "uv sync --frozen"
uv-info = "uv --version && echo 'Python:' && uv run python --version && echo 'Virtual env:' && uv run which python"
uv-tree = "uv tree"
uv-lock = "uv lock"
uv-add = "uv add"
uv-remove = "uv remove"
uv-update = "uv lock --upgrade"

# 🔧 Tool Version Management
tool-versions = "scripts/extract-versions.sh list"
