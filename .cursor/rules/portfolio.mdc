---
alwaysApply: false
---
# AI Assistant Rules for Portfolio Documentation

## Core Principles

### Accuracy Above All
- **Never exaggerate or oversell** technical capabilities or achievements
- **Verify claims** against actual project implementation and scope
- **Use precise language** that reflects what was actually built vs aspirational goals
- **Distinguish between** learning projects, proof-of-concepts, and production systems
- **Avoid buzzwords** without concrete backing (e.g., "enterprise-scale" for small projects)

### Audience-First Thinking
- **Hiring managers** need quick scannability and business context first
- **Technical reviewers** want architectural decisions and implementation details
- **Executives** care about impact, innovation, and strategic thinking
- **Peers** appreciate honest technical trade-offs and lessons learned

### Honesty and Humility
- **Acknowledge limitations** rather than hiding them
- **Share learning experiences** including mistakes and pivots
- **Credit influences** and technologies that enabled success
- **Avoid claiming expertise** in areas with limited experience
- **Be specific** about your actual role vs team contributions

## Recommended Portfolio Structure

### Repository Organization
```
DohdaLabs/portfolio (pinned repository)
├── README.md (scannable overview + project links)
├── projects/
│   ├── ats-pdf-generator.md (brief summary + link to full details)
│   ├── personal-finance-app.md (AI research project summary)
│   └── [other-projects].md
└── assets/ (headshots, diagrams, architecture docs)

DohdaLabs/ats-pdf-generator
├── README.md (user documentation - how to use the tool)
├── PORTFOLIO.md (business context, what this demonstrates for hiring)
├── DEVELOPMENT.md (code overview and local setup for exploration)
└── src/... (actual implementation)

DohdaLabs/personal-finance-app
├── README.md (user documentation - what the app does)
├── PORTFOLIO.md (AI research insights, technical decisions)
├── RESEARCH.md (AI findings and methodology)
├── DEVELOPMENT.md (code overview and local setup for exploration)
└── src/... (actual implementation)
```

### Central Portfolio README Structure
```markdown
# [Your Name] - Technical Portfolio

## Overview
[2-3 sentences about your engineering approach and focus areas]

## Featured Projects

| Project | Technologies | Demonstrates | Links |
|---------|-------------|--------------|-------|
| ATS PDF Generator | Python, Docker, CI/CD | Platform Engineering, DevEx | [Code](link) • [Portfolio](link) |
| Personal Finance App | Kotlin, NextJS, AI Tools | AI Research, Full-Stack | [Code](link) • [Portfolio](link) |

## Technical Leadership Areas
- Platform Engineering & Developer Experience
- AI-Assisted Development Research
- Team Scaling & Engineering Culture
- [Other core competencies]

## Contact
[Professional contact information]
```

### Individual Project PORTFOLIO.md Structure
```markdown
# [Project Name] - Portfolio Overview

## TL;DR
[1-2 sentences: what you built and key achievement]

## Problem Solved
[Business context and why this mattered]

## Technical Approach
[Key architectural decisions and implementation highlights]

## Key Challenges Addressed
- **[Challenge Category]**: [Specific challenge and how you solved it]
- **[Challenge Category]**: [Specific challenge and how you solved it]
- **[Challenge Category]**: [Specific challenge and how you solved it]

Examples:
- **Team Scaling**: Grew engineering capability from 5 to 15+ people while maintaining quality
- **Knowledge Transfer**: Created systematic approach to onboarding and skill development
- **Technical Strategy**: Balanced cutting-edge tools with enterprise stability requirements
- **Process Innovation**: Reduced deployment time from hours to minutes through automation
- **Cross-Functional Collaboration**: Aligned technical decisions with business objectives

## Key Technologies
[Technologies used with brief context on why chosen]

## Architecture & Implementation
[High-level architecture decisions and trade-offs]

## Results & Impact
[Measurable outcomes, performance improvements, user feedback]

## Lessons Learned
[What you learned, what you'd do differently]

## Links
- **Repository**: [GitHub link]
- **Live Demo**: [If applicable]
- **Documentation**: [Technical docs]
- **Related Posts**: [Blog posts, articles]
```

### Documentation File Purposes

**README.md (User-Focused)**
- Installation and usage instructions
- Quick start guide and examples
- Feature overview and benefits
- Requirements and compatibility
- Basic troubleshooting

**PORTFOLIO.md (Hiring Manager-Focused)**
- Business problem and solution overview
- Key technical decisions and rationale
- Key challenges addressed and how you solved them
- Impact and measurable outcomes
- Strategic thinking and trade-offs

**DEVELOPMENT.md (Code Exploration)**
- Code architecture and structure overview
- Local development environment setup
- How to run tests and build locally
- Key technical concepts and patterns used
- Notes for technical reviewers

*Note: For portfolio projects, avoid CONTRIBUTING.md unless you genuinely want community contributions. Instead, focus DEVELOPMENT.md on helping technical reviewers understand and explore your code.*

## Content Structure Guidelines

### Portfolio Overview Documents
```markdown
## Required Sections (in order):
1. **TL;DR** (2-3 sentences max)
2. **Problem Solved** (business context)
3. **Technical Highlights** (3-5 bullet points)
4. **Key Challenges Addressed** (context-driven capabilities)
5. **Key Technologies** (with context)
6. **Project Links** (repo, demo, docs)

## Optional Sections:
- Architecture decisions and trade-offs
- Performance metrics (if meaningful)
- Lessons learned
- Future improvements
```

### Individual Project PORTFOLIO.md Files
```markdown
## Required Sections:
1. **Project Overview** (problem + solution)
2. **Technical Approach** (key decisions and why)
3. **Implementation Highlights** (what you're proud of)
4. **Key Challenges Addressed** (context-driven capabilities)
5. **Technologies Used** (with justification)

## Avoid:
- Line-by-line code explanations
- Technology tutorials
- Comprehensive API documentation
- Defensive justifications
- Explicit role-targeting language
```

## Writing Style Guidelines

### Tone and Voice
- **Conversational but professional** - write like you're explaining to a colleague
- **Confident but not boastful** - let the work speak for itself
- **Direct and clear** - avoid marketing speak and buzzwords
- **Technical but accessible** - explain complex concepts simply
- **Honest about scope** - don't oversell small projects

### Language Conventions
- **Use active voice** ("I built" not "was built")
- **Be specific about your role** ("Led 3-person team" not "team effort")
- **Quantify when meaningful** (performance improvements, scale, time savings)
- **Avoid superlatives** without backing ("best practice" → "established pattern")
- **Use present tense** for ongoing capabilities, past tense for completed work

### Technical Writing Standards
- **Lead with impact** then explain implementation
- **Explain "why" not just "what"** - rationale behind technical decisions
- **Include context** - constraints, requirements, trade-offs considered
- **Acknowledge trade-offs** - what you optimized for and what you didn't
- **Link to relevant documentation** - don't duplicate, reference

## Content Guidelines

### What to Include
- **Actual technical contributions** you made personally
- **Decisions you influenced** or problems you solved
- **Technologies you used meaningfully** (not just installed)
- **Measurable improvements** where they exist
- **Learning experiences** that show growth mindset
- **Collaboration examples** that show teamwork

### What to Avoid
- **Technologies mentioned without context** (laundry lists)
- **Buzzword compliance** without substance
- **Academic or theoretical discussions** without practical application
- **Detailed explanations** of well-known technologies
- **Claims about industry standards** without specific knowledge
- **Future plans** presented as current capabilities

### Red Flags to Watch For
- **"Enterprise-scale"** without defining scale
- **"Production-ready"** for learning projects
- **"Best practices"** without specific knowledge
- **"Optimized"** without baseline or metrics
- **"Scalable"** without scale requirements
- **Technology name-dropping** without usage context

## Technical Accuracy Standards

### Project Classification
- **Learning Project**: Built to understand technology or concept
- **Portfolio Piece**: Demonstrates specific skills or approaches
- **Production System**: Actually used by real users with real requirements
- **Proof of Concept**: Validates approach or feasibility
- **Tool/Utility**: Solves actual problem for yourself or others

### Technology Experience Levels
- **Familiar**: Have used in learning context
- **Proficient**: Can build working solutions
- **Experienced**: Have used in multiple contexts, understand trade-offs
- **Expert**: Deep knowledge, can teach others, influence decisions

### Scale and Impact Language
- **Personal use**: "Built for my own workflow"
- **Team tool**: "Created for team productivity"
- **Department scale**: "Supports 20+ users"
- **Production scale**: "Handles X requests/day"
- **Enterprise scale**: "Deployed across organization"

## Review and Validation Process

### Self-Review Checklist
- [ ] Can I defend every technical claim in an interview?
- [ ] Have I been honest about my actual role and contributions?
- [ ] Would a technical reviewer find accurate, substantive content?
- [ ] Is this accessible to non-technical hiring managers?
- [ ] Have I avoided buzzwords without backing?
- [ ] Does this differentiate me without overselling?

### Common Overselling Patterns to Avoid
- Calling small projects "enterprise solutions"
- Claiming "industry expertise" from limited experience
- Using "architected" for simple applications
- Describing tutorials as "research"
- Positioning personal projects as "consulting work"
- Claiming team leadership without direct reports

## Target Audience Adaptations

### For Engineering Manager Roles
- **Emphasize**: Team building, process improvement, technical decision-making
- **Include**: Mentoring, collaboration, cross-functional work
- **Demonstrate**: Balance of technical depth and people leadership

### For Senior IC Roles
- **Emphasize**: Technical depth, problem-solving, innovation
- **Include**: Architecture decisions, performance optimization, code quality
- **Demonstrate**: Ability to handle complex technical challenges

### For Director/VP Roles
- **Emphasize**: Strategic thinking, organizational impact, vision
- **Include**: Business context, scalability planning, technology strategy
- **Demonstrate**: Ability to translate technical work into business value

## Quality Standards

### Minimum Viable Portfolio Entry
- Clear problem statement and solution approach
- Honest assessment of scope and your role
- 2-3 specific technical highlights
- Link to working code/demo
- Explanation of what this demonstrates for hiring

### Excellence Indicators
- Business context for technical decisions
- Honest discussion of trade-offs and limitations
- Evidence of learning and growth mindset
- Clear differentiation from typical solutions
- Demonstration of multiple engineering competencies

## Common Mistakes to Avoid

### Technical Mistakes
- Misrepresenting learning projects as production systems
- Claiming expertise in technologies with minimal exposure
- Overselling the complexity or scale of personal projects
- Including technologies without meaningful usage context

### Presentation Mistakes
- Wall-of-text descriptions without structure
- Leading with technology instead of problems solved
- Defensive tone about project limitations
- Academic writing style instead of professional narrative

### Strategic Mistakes
- Creating portfolio for wrong audience (hiring managers vs peers)
- Focusing on comprehensive coverage instead of differentiation
- Trying to demonstrate every possible skill instead of core strengths
- Neglecting to connect technical work to business value

---

## Final Reminder

The goal is to **accurately represent technical capabilities** while **making them accessible and compelling** to hiring decision-makers. Better to honestly present a smaller scope project well than to oversell and lose credibility. The portfolio should make someone want to have a technical conversation, not provide exhaustive documentation.
